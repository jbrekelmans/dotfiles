alias gc='git commit'
alias k='kubectl'

gmm() {
    if ! git diff --quiet --exit-code; then
        1>&2 echo "ERROR: tree has unstaged changes"
        return 1
    fi
    # Fail if there are untracked files.
    # We use [[ $(... | head -c1 | wc -c) -ne 0 ]] to determine if a command outputs zero bytes. See https://stackoverflow.com/questions/12137431/test-if-a-command-outputs-an-empty-string
    if [[ $(git ls-files --other --exclude-standard -z | head -c1 | wc -c) -ne 0 ]]; then
        1>&2 echo "ERROR: tree has untracked files"
        return 1
    fi
    local MASTER_BRANCH
    local LINE
    while read -r LINE; do
        if [[ ${LINE} == 'refs/heads/main' || ${LINE} == 'refs/heads/master' ]]; then
            MASTER_BRANCH=${LINE#refs/heads/}
            break
        fi
        # TODO disambiguite by choosing the one with most-recent commit
    done < <(git branch -l --format '%(refname)') || return
    local BRANCH
    BRANCH=$(git branch --show-current) || return
    if [[ ${BRANCH} == "${MASTER_BRANCH}" ]]; then
        git pull
    else
        git fetch origin "${MASTER_BRANCH}":"${MASTER_BRANCH}" || return
        local GIT_MERGE_ARGS
        GIT_MERGE_ARGS=("${MASTER_BRANCH}")
        GIT_MERGE_ARGS+=("$@")
        git merge "${GIT_MERGE_ARGS[@]}"
    fi
}

gmmne() {
    gmm --no-edit
}

gp() {
    local EXIT_CODE
    local TMP_DIR
    TMP_DIR=
    trap '[[ -z ${TMP_DIR} ]] || rm -rf "${TMP_DIR}"; trap - EXIT' EXIT
    TMP_DIR=$(mktemp -d)
    while [[ 1 -eq 1 ]]; do
        EXIT_CODE=0
        git push "$@" 2>"${TMP_DIR}"/stderr || EXIT_CODE=$?
        1>&2 cat "${TMP_DIR}"/stderr
        if [[ ${EXIT_CODE} -eq 0 ]]; then
            return
        fi
        if grep -qE 'Received HTTP code 502 from proxy after CONNECT$' "${TMP_DIR}"/stderr; then
            1>&2 echo "retrying: HEHE"
            continue
        fi
        return "${EXIT_CODE}"
    done
}

gpf() {
    gp --force
}

gtfo() {
    gpfo
}

gpfo() {
    local BRANCH
    local STDERR
    BRANCH=$(git branch --show-current) || return
    STDERR=$(gp --set-upstream origin "${BRANCH}" --force  2>&1 >/dev/null)
    local NEXT_LINE_IS_URL
    local URL
    local STDERR_LINE
    local REMOTE_OUTPUT
    local REMOTE_OUTPUT_TRIMMED
    NEXT_LINE_IS_URL=0
    URL=
    while IFS= read -r STDERR_LINE; do
        if [[ ${STDERR_LINE} == 'remote: '* ]]; then
            REMOTE_OUTPUT=${STDERR_LINE:8}
            REMOTE_OUTPUT_TRIMMED=${REMOTE_OUTPUT#"${REMOTE_OUTPUT%%[![:space:]]*}"}
            REMOTE_OUTPUT_TRIMMED=${REMOTE_OUTPUT_TRIMMED%"${REMOTE_OUTPUT_TRIMMED##*[![:space:]]}"}
            if [[ ${NEXT_LINE_IS_URL} -ne 0 ]]; then
                URL=${REMOTE_OUTPUT_TRIMMED}
            elif [[ ${REMOTE_OUTPUT_TRIMMED} == 'Create a pull request for '* && ${REMOTE_OUTPUT_TRIMMED} == *' on GitHub by visiting:' ]]; then
                NEXT_LINE_IS_URL=1
                echo "${STDERR_LINE}"
                continue
            fi
        fi
        1>&2 echo "${STDERR_LINE}"
        NEXT_LINE_IS_URL=0
    done <<< "${STDERR}"
    if [[ ${URL} != "" ]]; then
        open "${URL}"
    fi
}

gri() {
    local RE_POSINT
    RE_POSINT='^[1-9][0-9]*$'
    [[ $1 =~ $RE_POSINT ]] || {
        1>&2 echo "ERROR: first argument must be a positive base10 integer"
        return 1
    }
    git rebase -i HEAD~"${1}"
}

grc() {
    GIT_EDITOR=true git rebase --continue
}

gcpc() {
    GIT_EDITOR=true git cherry-pick --continue
}

kubectx_revalidate() {
    local PROJECT
    local REGION
    local NAME
    local NAMESPACE
    local X
    local N
    X=$(kubectx -c)
    NAMESPACE=$(kubens -c) || NAMESPACE='default'
    N=${#X}
    NAME=${X##*_}
    (( N = N - ${#NAME} - 1 )) || true
    X=${X:0:$N}
    REGION=${X##*_}
    (( N = N - ${#REGION} - 1 )) || true
    X=${X:0:$N}
    PROJECT=${X##*_}
    gcloud container clusters get-credentials "${NAME}" --project="${PROJECT}" --region="${REGION}" --internal-ip
    [[ ${NAMESPACE} == 'default' ]] || kubens "${NAMESPACE}"
}

# gow finds a go.mod file in the current directory or any ancestor directory.
# If such a file exists, gow reads the major and minor version from the go directive
# in the file. Then, gow finds the latest go binary on the PATH with the same
# major and minor version and runs the binary with any remaining arguments.
#
# Only binaries on the PATH with a name matching the regular expression go[1-9][0-9]*(\.[1-9][0-9]*)(\.[1-9][0-9]*)?
# are considered, which includes those binaries installed through https://golang.org/doc/manage-install.
#
# gow uses the ZSH array variable named "path" to search on the PATH, and as such gow only works with zsh.
gow() {
  local DIR
  local DIR_PARENT
  local DIR_INIT
  local GOMOD_DATA
  local GOMOD_FILE
  local GOMOD_LINE
  local GO_VERSION
  local PATH_ITEMS
  local X
  local Y
  local Z
  local GO_VERSION_LATEST_BIN
  local GO_VERSION_LATEST_BIN_PATCH
  local REGEXP_GO_BIN
  GO_VERSION_LATEST_BIN=
  GO_VERSION_LATEST_BIN_PATCH=
  REGEXP_GO_BIN='go[1-9][0-9]*(\.[1-9][0-9]*)(\.[1-9][0-9]*)?'
  # TODO do we need to set GO_VERSION to empty explicitly?
  GO_VERSION=
  DIR_INIT=$(pwd)
  DIR=${DIR_INIT}
  while [[ 1 -eq 1 ]]; do
    GOMOD_FILE="${DIR}/go.mod"
    if [[ -e "${GOMOD_FILE}" && ! -d "${GOMOD_FILE}" ]]; then
      GOMOD_DATA=$(cat "${GOMOD_FILE}" 2>/dev/null) || return
      while IFS= read -r GOMOD_LINE || [[ -n "${GOMOD_LINE}" ]]; do
        X=${GOMOD_LINE%%[[:space:]]*}
        if [[ ${#X} -lt "${#GOMOD_LINE}" && ${X} == 'go' ]]; then
          GO_VERSION=${GOMOD_LINE#*[[:space:]]}
          break
        fi
      done <<< "${GOMOD_DATA}"
      if [[ -z ${GO_VERSION} ]]; then
        1>&2 echo "${GOMOD_FILE} is invalid: missing go directive"
        return 1
      fi
      X=$(find "${path[@]}" -mindepth 1 -maxdepth 1 -print 2>/dev/null)
      while IFS= read -r X; do
        if [[ -n "${X}" && -x "${X}" && ! -d "${X}" ]]; then
          Y=${X##*/}
          if [[ ${Y} =~ $REGEXP_GO_BIN ]]; then
            if [[ ${Y:2} == ${GO_VERSION} ]]; then
              # Z is the patch number of the version of a go binary with compatible major/minor version on PATH.
              Z=0
            elif [[ ${Y:2} == "${GO_VERSION}."* ]]; then
              Z=${Y##*.}
            else
              continue
            fi
            if [[ -z ${GO_VERSION_LATEST_BIN} || ${Z} -gt ${GO_VERSION_LATEST_BIN_PATCH} ]]; then
              GO_VERSION_LATEST_BIN=${X}
              GO_VERSION_LATEST_BIN_PATCH=${Z}
            fi
          fi
        fi
      done <<< "${X}"
      if [[ -z ${GO_VERSION_LATEST_BIN} ]]; then
        1>&2 echo "PATH does not contain binary named go${GO_VERSION}*"
        1>&2 echo "Please install such a Go version via https://golang.org/doc/manage-install"
        return 1
      fi
      "${GO_VERSION_LATEST_BIN}" "${@}"
      return
    fi
    DIR_PARENT=$(dirname -- "${DIR}") || return
    if [[ ${DIR_PARENT} == "${DIR}" ]]; then
      break
    fi
    DIR=${DIR_PARENT}
  done
  1>&2 echo "no go.mod file in ${DIR_INIT} (or any parent thereof)"
  return 1
}

echo 'hint: chezmoi can be used to sync dotfiles: https://www.chezmoi.io/'
